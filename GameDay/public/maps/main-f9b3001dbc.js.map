{"version":3,"sources":["Scripts/js/site.ts"],"names":["showDetails","id","$","html","result","getCoor","loadEditScreen","line1","line2","city","state","zip","initMap","latitude","longitude","zoom","exist","status","google","maps","GeocoderStatus","OK","lat","results","geometry","location","lng","map","setCenter","Marker","position","viewport","fitBounds","console","log","Address","on","removeClass","this","addClass"],"mappings":"AAYA,QAAAA,aAAqBC,GACjBD,EAAEA,QAAQA,YAAYA,SACtBA,IAAIA,GAAMA,kBAAoBA,CAC9BA,GAAEA,MACEA,KAAMA,MACNA,IAAKA,EACLA,KAAMA,KACNA,QAASA,SAAUA,GACfE,EAAE,qBAAqBC,KAAKC,GAC5BC,WAEJL,MAAOA,SAAUA,EAAKA,EAAQA,OAWtC,QAAAM,gBAAwBL,EAAYM,EAAeC,EAAeC,EAAcC,EAAeC,GAC3FL,GAAIA,GAAMA,eAAiBA,CAC3BA,GAAEA,qBAAqBA,KAAKA,GAC5BA,EAAEA,QAAQA,SAASA,UAGvB,QAAAM,SAAiBC,EAAUC,EAAWC,EAAMC,GACxCJ,GAAIA,GAAWA,GAAIA,QAAOA,KAAKA,OAAOA,WAAWA,GAAWA,WAAWA,IACnEA,GACAA,OAAQA,EACRA,KAAMA,SAASA,GAGnBA,IADAA,IAAMA,GAAIA,QAAOA,KAAKA,IAAIA,SAASA,eAAeA,OAAQA,GAC7CA,GAATA,EACAA,CAAaA,GAAIA,QAAOA,KAAKA,QACzBA,IAAKA,IACLA,SAAUA,KAMtB,QAAAP,WACIA,QAAQA,IAAIA,QACZA,IAAIA,GAAUA,EAAEA,gBAAgBA,OAC5BA,EAAOA,GAAIA,QAAOA,KAAKA,QAC3BA,GAAKA,SAAUA,QAASA,GAAWA,SAAUA,EAASA,GAClD,GAAIY,GAAUC,OAAOC,KAAKC,eAAeC,GAAI,CACzC,GAAIC,GAAMC,EAAQ,GAAGC,SAASC,SAASH,MACnCI,EAAMH,EAAQ,GAAGC,SAASC,SAASC,KACvCd,SAAQU,EAAKI,EAAK,IAAI,GACtBC,IAAIC,UAAUL,EAAQ,GAAGC,SAASC,SAElC,EAAa,GAAIP,QAAOC,KAAKU,QAErBF,IAAKA,IACLG,SAAUP,EAAQ,GAAGC,SAASC,WAElCF,EAAQ,GAAGC,SAASO,UACpBJ,IAAIK,UAAUT,EAAQ,GAAGC,SAASO,cAEtCE,SAAQC,IAAI,wDAA0DjB,KAzElF,GAAIU,KAEJQ,QAAA,WAAAA,QAAAA,MAMAA,MAAAA,KAmBAjC,GAAE,mBAAmBkC,GAAG,QAAS,WAC7BlC,EAAE,oCAAoCmC,YAAY,iBAClDnC,EAAEoC,MAAMC,SAAS","file":"main-f9b3001dbc.js","sourcesContent":["declare var $: any;\r\ndeclare var google: any;\r\nvar map;\r\n\r\nclass Address {\r\n    line1: string;\r\n    line2: string;\r\n    city: string;\r\n    state: string;\r\n    zip: number;\r\n}\r\n\r\nfunction showDetails(id: number) {\r\n    $('#map').removeClass('hidden');\r\n    var url = '/Event/Details/' + id;\r\n    $.ajax({\r\n        type: \"GET\",\r\n        url: url,\r\n        data: null,\r\n        success: function (result) {\r\n            $('#DetailsContainer').html(result);\r\n            getCoor();\r\n        },\r\n        error: function (req, status, error) {\r\n            // do something with error   \r\n        }\r\n    });\r\n};\r\n\r\n$('.eventContainer').on('click', function () {\r\n    $('#EventListDiv>div .panel-primary').removeClass(\"panel-primary\");\r\n    $(this).addClass(\"panel-primary\");\r\n});\r\n\r\nfunction loadEditScreen(id: number, line1: string, line2: string, city: string, state: string, zip: number) {\r\n    var url = '/Event/Edit/' + id;\r\n    $('#DetailsContainer').load(url);\r\n    $('#map').addClass('hidden');\r\n}\r\n\r\nfunction initMap(latitude, longitude, zoom, exist) {\r\n    var myLatlng = new google.maps.LatLng(parseFloat(latitude), parseFloat(longitude));\r\n    var mapOptions = {\r\n        center: myLatlng,\r\n        zoom: parseInt(zoom)\r\n    };\r\n    map = new google.maps.Map(document.getElementById('map'), mapOptions);\r\n    if (exist == true) {\r\n        var marker = new google.maps.Marker({\r\n            map: map,\r\n            position: myLatlng\r\n        });\r\n    }\r\n}\r\n    \r\n\r\nfunction getCoor() {\r\n    console.log('hello');\r\n    var address = $('#addressElem').text();\r\n    var coor = new google.maps.Geocoder();\r\n    coor.geocode({ address: address }, function (results, status) {\r\n        if (status == google.maps.GeocoderStatus.OK) {\r\n            var lat = results[0].geometry.location.lat();\r\n            var lng = results[0].geometry.location.lng();\r\n            initMap(lat, lng, 16, true);\r\n            map.setCenter(results[0].geometry.location);//center the map over the result\r\n            //place a marker at the location\r\n            var marker = new google.maps.Marker(\r\n                {\r\n                    map: map,\r\n                    position: results[0].geometry.location\r\n                });\r\n            if (results[0].geometry.viewport)\r\n                map.fitBounds(results[0].geometry.viewport);\r\n        } else {\r\n            console.log('Geocode was not successful for the following reason: ' + status);\r\n        }\r\n    });\r\n    \r\n}\r\n"],"sourceRoot":"/source/"}